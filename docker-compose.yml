version: '3.8'

# included for testing against Ray-Worker only
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "2181"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure

  # Message Queues
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "greetings:1:1,castiron_etl_config:1:1,castiron_etl_source_file:4:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: "INTERNAL_PLAINTEXT://0.0.0.0:9092,EXTERNAL_PLAINTEXT://0.0.0.0:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL_PLAINTEXT:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL_PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL_PLAINTEXT://kafka:9092,EXTERNAL_PLAINTEXT://localhost:9093"
    depends_on: # should be started after
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure

  # Object Storage
  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: castiron
      MINIO_ROOT_PASSWORD: castiron
      #for more information see https://docs.min.io/docs/minio-bucket-notification-guide.html#apache-kafka
      #the following represent two sets of configs for two separate MINIO notification ARN
      MINIO_NOTIFY_KAFKA_BROKERS_config: kafka:9092
      MINIO_NOTIFY_KAFKA_ENABLE_config: 'on'
      MINIO_NOTIFY_KAFKA_TOPIC_config: castiron_etl_config
      MINIO_NOTIFY_KAFKA_BROKERS_source: kafka:9092
      MINIO_NOTIFY_KAFKA_ENABLE_source: 'on'
      MINIO_NOTIFY_KAFKA_TOPIC_source: castiron_etl_source_file
    entrypoint: /usr/bin/docker-entrypoint.sh server /data --console-address :9001
    ports:
      - "9001:9001"
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      start_period: 10s
      retries: 3
    restart: on-failure

  ray_cast_iron_worker:
    build:
      context: .
    container_name: ray-cast-iron-worker
    environment:
      CONSUMER_GRP_ETL_CONFIG: etl_config_consumer_grp1
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: castiron
      MINIO_ROOT_PASSWORD: castiron
      KAFKA_BROKER: kafka:9092
      RAY_HEAD_PORT: 6379
      RAY_HEAD_ADDRESS: 0.0.0.0:${RAY_HEAD_PORT}
      RAY_NODE_MANAGER_PORT: 6380
      RAY_OBJECT_MANAGER_PORT: 6381
      RAY_MIN_WORKER_PORT: 10002
      RAY_MAX_WORKER_PORT: 19999
    volumes:
      - ./etl:/app/etl
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always